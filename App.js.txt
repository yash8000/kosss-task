// App.js

import React, { useState, useEffect } from 'react';

const App = () => {
  const [images, setImages] = useState([]);
  const [filteredImages, setFilteredImages] = useState([]);
  const [selectedCategory, setSelectedCategory] = useState('');
  const [searchKeyword, setSearchKeyword] = useState('');
  const [layout, setLayout] = useState('grid');
  const [imageSize, setImageSize] = useState('medium');
  const [imageSpacing, setImageSpacing] = useState('normal');

  useEffect(() => {
    fetchImages();
  }, []);

  const fetchImages = async () => {
    try {
      const response = await fetch('https://www.reddit.com/r/pics.json');
      const data = await response.json();
      const imageList = data.data.children.map((child) => child.data);
      setImages(imageList);
      setFilteredImages(imageList);
    } catch (error) {
      console.log('Error fetching images:', error);
    }
  };

  const handleCategoryChange = (category) => {
    setSelectedCategory(category);
    if (category === '') {
      setFilteredImages(images);
    } else {
      const filtered = images.filter((image) => image.category === category);
      setFilteredImages(filtered);
    }
  };

  const handleSearch = (keyword) => {
    setSearchKeyword(keyword);
    if (keyword === '') {
      setFilteredImages(images);
    } else {
      const filtered = images.filter(
        (image) =>
          image.title.toLowerCase().includes(keyword.toLowerCase()) ||
          image.description.toLowerCase().includes(keyword.toLowerCase())
      );
      setFilteredImages(filtered);
    }
  };

  const handleLayoutChange = (layoutType) => {
    setLayout(layoutType);
  };

  const handleImageSizeChange = (size) => {
    setImageSize(size);
  };

  const handleImageSpacingChange = (spacing) => {
    setImageSpacing(spacing);
  };

  return (
    <div>
      <div>
        <label>Filter by Category:</label>
        <select onChange={(e) => handleCategoryChange(e.target.value)}>
          <option value="">All</option>
          <option value="animals">Animals</option>
          <option value="nature">Nature</option>
          <option value="architecture">Architecture</option>
        </select>
      </div>

      <div>
        <label>Search:</label>
        <input type="text" value={searchKeyword} onChange={(e) => handleSearch(e.target.value)} />
      </div>

      <div>
        <label>Layout:</label>
        <select onChange={(e) => handleLayoutChange(e.target.value)}>
          <option value="grid">Grid</option>
          <option value="carousel">Carousel</option>
        </select>
      </div>

      <div>
        <label>Image Size:</label>
        <select onChange={(e) => handleImageSizeChange(e.target.value)}>
          <option value="small">Small</option>
          <option value="medium">Medium</option>
          <option value="large">Large</option>
        </select>
      </div>

      <div>
        <label>Image Spacing:</label>
        <select onChange={(e) => handleImageSpacingChange(e.target.value)}>
          <option value="normal">Normal</option>
          <option value="compact">Compact</option>
          <option value="spacious">Spacious</option>
        </select>
      </div>

      <div className={`image-container ${layout} ${imageSize} ${imageSpacing}`}>
        {filteredImages.map((image) => (
          <img key={image.id} src={image.url} alt={image.title} />
        ))}
      </div>
    </div>
  );
};

export default App;
